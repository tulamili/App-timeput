#!/usr/bin/perl
use 5.008 ; use strict ; use warnings ; 
use Getopt::Std ; getopts ".:!1c:dgsw:" , \my %o ; 
use Time::HiRes qw[ gettimeofday tv_interval sleep ] ; # Perl 5.7.3からコアモジュール
use Term::ANSIColor qw[ color :constants ] ; $Term::ANSIColor::AUTORESET = 1 ;
use FindBin qw[ $Script ] ; 

sub FB ($){FAINT BOLD $_[0]} 
$SIG{INT} = sub { local $| = 1 ; say STDERR "Ctrl+\\", FB " or ", "Ctrl+¥", FB " to terminate `$Script'. " } ;
$| = 1 if $o{'!'} ;
if ( defined $o{w} ) { while (<>) { print $_ ; sleep $o{w} } ; exit } ; 
my ($t0s,$t0p) =  gettimeofday ; # 「起動した時刻」の記録。15マイクロ秒のオーバーヘッド
my $dig = $o{'.'} if defined $o{'.'} ; # 桁数 (表示する秒の小数点以下の桁数)
my $lay = 1e6 / 10 ** $dig if defined $dig ; # lay は英語の「置く」のつもり。
my $HMS = '%02d:%02d:%02d' ; #　何度も使われる書式
do { & main ; exit } ; 

sub hhmmss0 () { sprintf $HMS , @{[localtime]}[2,1,0] }
sub hhmmssD () { my($s,$m)=gettimeofday ; sprintf "$HMS.%0${dig}d",@{[localtime $s]}[2,1,0],int $m/$lay }
sub ymdhms () { my @f=localtime;$f[4]+=1;$f[5]+=1900 ; sprintf "%02d-%02d-%02d $HMS" , @f[5,4,3,2,1,0] }
sub secondsSince0 () { return sprintf "%0.0f" , time - $t0s } 
sub secondsSinceD () { return sprintf "%0.${dig}f" , tv_interval [ $t0s, $t0p ] }
sub gapproc () {} ; # 50ナノ秒のオーバーヘッド。1回の実行につき。
* gapproc = $o{g} ? sub { ($t0s, $t0p) = ( gettimeofday ) } : sub { } ; 
sub timenow () {
  my $t1 = $o{d} ? ymdhms : defined $dig ? hhmmssD : hhmmss0 ; 
  my $t2 = $dig ? secondsSinceD : secondsSince0 ; 
  "$t1 $t2" ;
}

sub main () { 
  * timenow = $o{d} ? * ymdhms : defined $dig ? * hhmmssD : * hhmmss0 ; 
  * timenow = $o{'.'} ? * secondsSinceD : * secondsSince0 if $o{s} || $o{g} ; 
  my $C = defined $o{c} ? $o{c} eq 0 ? '' : color $o{c} : color 'faint bold' ;
  my $R = defined $o{c} ? $o{c} eq 0 ? '' : color 'reset' : color 'reset' ; 
  while (<>) { my $t = timenow ; print "$C$t$R\t$_" ; & gapproc } ;
}

## ヘルプの扱い
sub VERSION_MESSAGE {}
sub HELP_MESSAGE{
    use FindBin qw[ $Script ] ; 
    $ARGV[1] //= '' ;
    open my $FH , '<' , $0 ;
    while(<$FH>){
        s/\$0/$Script/g ;
        print $_ if $ARGV[1] eq 'opt' ? m/^\ +\-/ : s/^=head1// .. s/^=cut// ;
    }
    close $FH ;
    exit 0 ;
}

=encoding utf8 

=head1

 timeput 

  入力を1行ずつ読み、その各行の先頭に、読み取った時点の時刻をタブ区切りで出力する。
  ただし、"-w 秒数" の指定により、1行読んで出力して、指定秒数動作を止める(sleepする)。

 オプション : 
    -c STR : 色の指定。0で色無し。"cyan","faint red bold","bright_blue"など。色名指定はTerm::ANSIColor を参照。
    -d : 日付も出力。yyyy-mm-dd HH:MM:SS 形式で。(date)
    -g : 開始からの秒数でなくて、1行ごとの間隔秒数を表示。(gap)
    -s : 起動してからの秒数を出力。(start)
    -w N: 入力から1行ずつ逐次読み取り出力して、N秒停止することを繰り返す。正の浮動小数点数を指定可能。(wait)
    -. N : 秒数を小数点以下 N 桁出力する。1から6の整数値が使える。(-d とは両立しない。)
    -! : 出力のバッファリングをしない。(See also "unbuffer", a Unix command.)

 利用例 : 
    yes | head | timeput -.6 
    yes | head | timeput -d  | sed 's/ /T/' # POSIXの日時形式にしたい場合。このsed文は最初の空白文字のみTに変更。
    seq 5 | timeput -.6 | timeput -s.6| timeput -g.6
    seq 10 | timeput -! -w0.45 | timeput -g.3 # 0.45秒ずつ1行を読み取る。
    command 1> output.txt 2> >( timeput error.log ) # command は標準エラー出力に何か出力をするプログラムである。便利。

=head1 AUTHOR

下野寿之 Toshiyuki SHIMONO <bin4tsv@gmail.com>

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2021 Toshiyuki SHIMONO. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=cut 
